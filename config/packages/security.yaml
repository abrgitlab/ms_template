security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        api_doc_user:
            memory:
                users:
                    "%env(API_DOC_LOGIN)%":
                        password: "%env(API_DOC_PASSWORD)%"

    encoders:
        Symfony\Component\Security\Core\User\User: plaintext

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_BACKEND:
            - ROLE_AUTHENTICATED

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_doc:
            pattern: ^/api/v\d+/doc(?:|\.json)$
            stateless: true
            lazy: true
            http_basic:
                provider: api_doc_user

        api:
            pattern: ^/api/v\d+/
            stateless: true
            lazy: true
            guard:
                authenticators:
                    - App\Security\Authenticator\BackendAuthenticator
            provider: users_in_memory

        main:
            anonymous: true
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
